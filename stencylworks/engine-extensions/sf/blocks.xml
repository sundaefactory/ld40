<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--

1) Types
[void, actor, actortype, boolean, camera, color, control, font, group, number, list, anything, region, scene, sound, text, dropdown]2) The Spec

<block> - An entry for a custom block
tag = unique name for block, only ABC and - (dash) allowed
spec = like what you see in language files, use %0, %1, etc. to specify where the spaces go
code = output code, use ~ to specify the blanks. Must match the order in which fields are specified.
type = any of these [normal, action, wrapper, event]
color = any of these [blue, cyan, green, lime, purple, red, gray, charcoal]
returns = a TYPE

<fields> - A list of fields that a block contains
For children, the tag name corresponds to a TYPE. The order attribute starts at 0 and increments by 1. Do not skip values.

If you wish to use a dropdown, look at the example below for syntax.

3) Stuff that is not implemented yet

- No support for embedded blocks yet.
- No support for events.
- This format will be reused for customized palettes in the future.

-->
<palette>

	<block tag="sf-this" spec="This" code="this" type="normal" color="green" returns="anything">
	</block>
		
	<block tag="sf-notnull" spec="%0 not null" code="(~!=null)" type="normal" color="green" returns="boolean">
		<fields>
			<anything order="0"></anything>
		</fields>
	</block>
		
	<block tag="sf-isnull" spec="%0 is null" code="(~==null)" type="normal" color="green" returns="boolean">
		<fields>
			<anything order="0"></anything>
		</fields>
	</block>

	<block tag="sf-nameof" spec="name of %0" code="'~'" type="normal" color="green" returns="string">
		<fields>
			<anything order="0"></anything>
		</fields>
	</block>
	
	<block tag="sf-color" spec="change color of %0 with %1" code="sf.SF_Utils.instance.color(~,~);" type="action" color="green" returns="void">
		<fields>
			<actor order="0"></actor>
			<color order="1"></color>
		</fields>
	</block>
	
	<block tag="sf-facing-right" spec="set %0 facing right %1" code="sf.SF_Utils.instance.facingRight(~,~);" type="action" color="green" returns="void">
		<fields>
			<actor order="0"></actor>
			<boolean order="1"></boolean>
		</fields>
	</block>
	
	<block tag="sf-scalex" spec="set %0 scalex to %1" code="sf.SF_Utils.instance.scaleX(~,~);" type="action" color="green" returns="void">
		<fields>
			<actor order="0"></actor>
			<number order="1"></number>
		</fields>
	</block>
	
	
	
</palette>